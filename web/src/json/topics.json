{"Differences Between Type Aliases and Interfaces ?":[{"title":"Differences Between Type Aliases and Interfaces?","content":"Type aliases and interfaces are similar but not the same. The key difference is that interfaces are extensible whereas type aliases are not. Type aliases are used to create a new type that is a subset of an existing type. Interfaces are used to create a new type that is a superset of an existing type.\n\n**Extending an interface**\n\n```typescript\ninterface Animal {\n  name: string\n}\n\ninterface Bear extends Animal {\n  honey: boolean\n}\n\nconst bear = getBear() \nbear.name\nbear.honey\n        \n```\n\n**Extending a type via intersections**\n\n```typescript\ntype Animal = {\n  name: string\n}\n\ntype Bear = Animal & { \n  honey: boolean \n}\n\nconst bear = getBear();\nbear.name;\nbear.honey;\n        \n```\n","section":"Differences Between Type Aliases and Interfaces ?","source":"https://www.typescriptlang.org"}],"difference-between-explicit-and-implicit-types-in-typescript":[{"title":"Difference between explicit and implicit types in typescript ?","content":"\nExplicit types are used when you know the type of the variable. Implicit types are used when you don't know the type of the variable.\n\n**Explicit types**\n\n```typescript\nlet name: string = \"John\"\nlet age: number = 30\nlet isMarried: boolean = false\n```\n\n**Implicit types**\n\n```typescript\nlet name = 'John'\nlet age = 30\n\nlet isMarried = false\n\n```\n","section":"difference-between-explicit-and-implicit-types-in-typescript"}],"do-we-need-to-compile-typescript-files-and-why":[{"title":"Do we need to compile TypeScript files and why?","content":"\nYes we do. Typescript is just a language Extension browsers can't interpret it. Converting from TypeScript to JavaScript is called compiling. Compiling doesn't mean binary code is created in this case. For this kind of translation, also the term transpilation is used instead of compilation.\n","section":"do-we-need-to-compile-typescript-files-and-why"}],"how-to-call-base-class-constructor-from-child-class-in-typescript":[{"title":"How to call base class constructor from child class in TypeScript?","content":"\nWe can call base class constructor using `super()`.\n","section":"how-to-call-base-class-constructor-from-child-class-in-typescript","source":"https://stackoverflow.com"}],"list-the-built-in-types-in-typescript":[{"title":"List the built-in types in Typescript ?","content":"\nNumber type: it is used to represent number type values and represents double precision floating point values.\n\n```typescript\nvar variable_name: number;\n```\n\n**String type:** it represents a sequence of characters stored as Unicode UTF-16 code. It is the same as JavaScript primitive type.\n\n```typescript\nvar variable_name: string;\n```\n\n**Boolean type:** in Typescript, it is used to represent a logical value. When we use the Boolean type, we get output only in true or false. It is also the same as JavaScript primitive type.\n\n```typescript\nvariable_name\n```\n\n**Null type:** it represents a null literal and it is not possible to directly reference the null type value itself.\n\n```typescript\nvar variable_name:number = null;\n\n```\n\n**Undefined type:** it is the type of undefined literal. This type of built-in type is the sub-type of all the types.\n\n```typescript\nvar variable_name:number = undefined;\n\n```\n","section":"list-the-built-in-types-in-typescript"}],"what-are-the-benefits-of-typescript":[{"title":"What are the benefits of TypeScript?","content":"\nThe main benefit of TypeScript is that it can highlight unexpected behavior in your code, lowering the chance of bugs.\n\n- It helps in code structuring.\n- Use class based object oriented programming.\n- Impose coding guidelines.\n- Offers type checking.\n- Compile time error checking.\n- Intellisense\n","section":"what-are-the-benefits-of-typescript","source":"https://stackoverflow.com"}],"what-does-required-do-in-typescript":[{"title":"What does Required do in TypeScript?","content":"\nConstructs a type consisting of all properties of Type set to required. The opposite of Partial.\n\n```typescript\ninterface Props {\n  a?: number;\n  b?: string;\n}\n \nconst obj: Props = { a: 5 };\n \nconst obj2: Required<Props> = { a: 5 };\n\n//Property 'b' is missing in type '{ a: number; }' but required in type 'Required<Props>'.\n```\n","section":"what-does-required-do-in-typescript","source":"https://www.typescriptlang.org/"}],"what-is-build-time-error":[{"title":"What is build time error?","content":"\nErrors that occur when you violate the rules of writing syntax are known as build-Time errors. This compiler error indicates something that must be fixed before the code can be compiled. All these errors are detected by the compiler and thus are known as build-time or compile-time errors.\n","section":"what-is-build-time-error","source":"https://www.geeksforgeeks.org"}],"what-is-enum-in-typescript":[{"title":"what is enum in typescript","content":"In TypeScript, enums, or enumerated types, are data structures of constant length that hold a set of constant values. Each of these constant values is known as a member of the enum. Enums are useful when setting properties or values that can only be a certain number of possible values.\n\n```typescript\nenum UserResponse {\n  No = 0,\n  Yes = 1,\n}\n\nfunction respond(recipient: string, message: UserResponse): void {\n  console.log(recipient, message); // \"Princess Caroline\",  1\n}\n\nrespond(\"Princess Caroline\", UserResponse.Yes);\n\n```\n","section":"what-is-enum-in-typescript","source":"https://www.digitalocean.com/community/tutorials/how-to-use-enums-in-typescript"}],"what-is-interface-in-typescript":[{"title":"What is interface in typescript?","content":"\nInterface is a blueprint of an object which is used to define the properties and methods of an object. It is used to define the structure of an object. and helpfull in type checking.\n\nYou can explicitly describe this object’s shape using an interface declaration:\n\n```typescript\ninterface Person {\n firstName: string\n lastName: string\n}\n\nvar person: Person = {\n firstName: 'John',\n lastName: 'Doe',\n}\n\n```\n","section":"what-is-interface-in-typescript"}],"what-is-literal-type-in-typescript":[{"title":"What is literal type in typescript","content":"TypeScript Literal Types restrict the value of a variable to finite valid values. This is in contrast to the variable which allows you to change value (except for TypeScript Constants). The latest version of Typescript supports the String Literal Types, Numeric Literal Types, Boolean Literal Types & Enum Literal Types.\n\n**Example**\n\n```typescript\ntype Easing = \"ease-in\" | \"ease-out\" | \"ease-in-out\";\n```\n\n```typescript\ninterface ValidationSuccess {\n  isValid: true;\n  reason: null;\n}\ninterface ValidationFailure {\n  isValid: false;\n  reason: string;\n}\ntype ValidationResult = ValidationSuccess | ValidationFailure;\n```\n","section":"what-is-literal-type-in-typescript","source":"https://www.typescriptlang.org/"}],"what-is-static-type-checking-in-typescript":[{"title":"What is static type checking in TypeScript?","content":"\nIt is a type system that is used to check the type of variables and functions at compile time. Used to prevent runtime errors and improve the readability of the code. Static type checking is helpful in debugging and also in writing clean and readable code and IDE intellisense features.\n\n```typescript\nconst message = \"hello!\";\nmessage()\n//ERROR:  This expression is not callable.\n```\n","section":"what-is-static-type-checking-in-typescript","source":"https://www.typescriptlang.org/docs/handbook/2/basic-types.html"}],"what-is-type-assertion":[{"title":"What is type assertion?","content":"\n Type assertions enable you to override default type inference for neutral types. Type assertion is a technique that informs the compiler about the type of a variable. Type assertion is similar to typecasting but it doesn’t reconstruct code. You can use type assertion to specify a value’s type and tell the compiler not to deduce it. When we want to change a variable from one type to another such as any to number etc, we use Type assertion.\n\n**Example**\n\n```typescript\n\nlet str: unknown = \"Typescript\";\nconsole.log(str);\n  \nlet len: number = (str as string).length;\nconsole.log(len);             \n                        \n```\n","section":"what-is-type-assertion","source":"https://www.geeksforgeeks.org/"}],"what-is-type-casting-in-typescript":[{"title":"What is type casting in typescript","content":"\nType casting means changing an expression from one data type to another.\n\nTypeScript is compiled to JavaScript and behaves differently; it does not give two hoots about the types defined by you, and there is no runtime to enforce types during the execution.\n\nExample\n\n```typescript\n\nlet data: string = '123';\nconsole.log(\"Type of Data before Type Cast==>\", typeof data);\nconsole.log(\"Type of Data after Type Cast==>\", typeof Number(data));\n\n```\n","section":"what-is-type-casting-in-typescript","source":"https://www.delftstack.com/howto/typescript/casting-a-number-to-string-in-typescript/"}],"what-is-type-guard-in-typescript":[{"title":"What is type guard in typescript","content":"\n\nA type guard is a TypeScript technique used to get information about the type of a variable, usually within a conditional block. Type guards are regular functions that return a boolean, taking a type and telling TypeScript if it can be narrowed down to something more specific.\n\n**Example**\n\n```typescript\n\nfunction StudentId(x: string | number) {\n    if (typeof x == 'string') {\n        console.log('Student');\n    }\n    if (typeof x === 'number') {\n        console.log('Id');\n    }\n}\nStudentId(`446`); //prints Student\nStudentId(446); //prints Id\n\n```\n","section":"what-is-type-guard-in-typescript","source":"https://blog.logrocket.com/"}],"what-is-type-narrowing-in-typescript":[{"title":"what is type narrowing in typescript","content":"\nType narrowing is just what it sounds like—narrowing down a general type into something more precise. If you've ever dealt with union types, e.g. string | number you've certainly encountered this. In fact, optional types such as x?: number often require narrowing as well, as this typing is equivalent to x: number | undefined. In both of these cases, you'll likely need to handle each case in your code, and for that you'll need to narrow down the type first.\n\n**Ways to Narrow These Types**\nTo narrow a union type down to one, we'll need to consider each case. We can do this with good old-fashioned control flow in JavaScript, as the TypeScript compiler is clever enough to infer the narrowing from our conditional logic. Typically, this just means using if or switch statements.\n\nLet's consider a common, real-world example that I'm sure you've all written once or twice: a function that returns the deliciousness score for a given type of candy.\n\n```typescript\ntype Candy =\n  | { name: \"Skittles\"; type: \"Regular\" | \"Tropical\" }\n  | { name: \"Black Licorice\"; qty: number }\n  | { name: \"Runts\"; isBanana: boolean };\n\nfunction rateCandy(candy: Candy): number {\n  switch (candy.name) {\n    case \"Skittles\":\n      return candy.type === \"Regular\" ? 8 : 7;\n    case \"Black Licorice\":\n      return candy.qty * -1;\n    case \"Runts\":\n      return candy.isBanana ? 11 : 5;\n    default:\n      throw new Error(`\"${candy}\" is not a valid candy!`);\n  }\n}\n```\n","section":"what-is-type-narrowing-in-typescript","source":"https://formidable.com/"}],"what-is-typescript":[{"title":"What is Typescript?","content":"\nTypeScript is a free and open-source programming language developed and maintained by Microsoft. It is a strict syntactical superset of JavaScript, and adds optional static typing and class-based object-oriented programming to the language.\n","section":"what-is-typescript","source":"https://stackoverflow.com/questions/12694530/what-is-typescript-and-why-would-i-use-it-in-place-of-javascript"}],"what-is-unions-in-typescript":[{"title":"What is Unions in typescript?","content":"\nUnions are a way to combine multiple types into a single type.\n\n**Variable Example**\n\n```typescript\nlet isDone: boolean | number = false\n```\n\n**Function Example**\n\n```typescript\nfunction add(x: number, y: number): number | boolean {\n return x + y\n}\n```\n","section":"what-is-unions-in-typescript","source":"https://www.typescriptlang.org/docs/handbook/typescript-in-5-minutes.html#next-steps"}],"when-should-i-use-unknown-keyword-typescript":[{"title":"When should I use unknown keyword TypeScript?","content":"We may need to describe the type of variables that we do not know when we are writing an application. These values may come from dynamic content – e.g. from the user – or we may want to intentionally accept all values in our API. In these cases, we want to provide a type that tells the compiler and future readers that this variable could be anything, so we give it the unknown type.\n\n```typescript\nlet notSure: unknown = 4;\nnotSure = \"maybe a string instead\";\n \n// OK, definitely a boolean\nnotSure = false;\n```\n","section":"when-should-i-use-unknown-keyword-typescript","source":"https://www.typescriptlang.org/"}],"why-is-generic-used-in-typescript":[{"title":"Why is generic used in TypeScript?","content":"\nGenerics are able to create a component or function to work over a variety of types rather than a single one.\n\n```typescript\n/** A class definition with a generic parameter */\nclass Queue<T> {\n  private data = [];\n  push = (item: T) => this.data.push(item);\n  pop = (): T => this.data.shift();\n}\n\nconst queue = new Queue<number>();\nqueue.push(0);\nqueue.push(\"1\"); // ERROR : cannot push a string. Only numbers allowed\n```\n","section":"why-is-generic-used-in-typescript","source":"https://stackoverflow.com"}]}